{"version":3,"sources":["components/AddCategory.jsx","components/GifGridItem.jsx","helpers/getGifs.js","components/GifGrid.jsx","hooks/useFetchGifs.js","GifExpertApp.jsx","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","state","type","value","onChange","target","GifGridItem","title","url","id","className","src","alt","getGifs","category","a","encodeURI","fetch","response","json","data","gifs","map","img","images","preview_webp","GifGrid","loading","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAahD,OACE,0BAAMC,SATa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAYP,GAAZ,mBAA2BO,OACzCN,EAAc,OAMd,2BAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAZhB,SAACP,GAAD,OAAOF,EAAcE,EAAEQ,OAAOF,YCJ7CG,EAAc,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,IAAc,EAATC,GAExC,OACE,yBAAKC,UAAU,0CACb,yBAAKC,IAAKH,EAAKI,IAAKL,IACpB,2BAAIA,K,uBCPGM,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfP,EADe,iDACiCQ,UACpDF,GAFmB,+DAIEG,MAAMT,GAJR,cAIfU,EAJe,gBAKEA,EAASC,OALX,uBAKbC,EALa,EAKbA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAD,YAAU,CAC9Bd,GAAIc,EAAId,GACRF,MAAOgB,EAAIhB,MACXC,IAAG,UAAEe,EAAIC,cAAN,aAAE,EAAYC,aAAajB,QAVX,kBAYda,GAZc,4CAAH,sDCKPK,EAAU,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAAe,ECFb,SAACA,GAAc,IAAD,EACdrB,mBAAS,CACjC2B,KAAM,GACNO,SAAS,IAH6B,mBACjC1B,EADiC,KAC1B2B,EAD0B,KAcxC,OATAC,qBAAU,WACRhB,EAAQC,GAAUgB,MAAK,SAACC,GAAD,OACrBH,EAAS,CACPR,KAAMW,EACNJ,SAAS,SAGZ,CAACb,IAEGb,EDX2B+B,CAAalB,GAAjCU,EADyB,EAC/BJ,KAAcO,EADiB,EACjBA,QAEtB,OACE,oCACE,wBAAIjB,UAAU,sCAAsCI,GACnDa,GACC,uBAAGjB,UAAU,oCAAb,cAEF,yBAAKA,UAAU,aACZc,EAAOF,KAAI,SAACC,GAAD,OACV,kBAAC,EAAD,eAAaU,IAAKV,EAAId,IAAQc,UEZ3BW,EAAe,WAAO,IAAD,EACIzC,mBAAS,CAAC,cADd,mBACzB0C,EADyB,KACb3C,EADa,KAEhC,OACE,oCACE,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACA,4BACG2C,EAAWb,KAAI,SAACR,GAAD,OACd,kBAAC,EAAD,CAASmB,IAAKnB,EAAUA,SAAUA,U,MCR5CsB,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,U","file":"static/js/main.8af5aba1.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = (e) => setInputValue(e.target.value);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (inputValue.trim().length > 2) {\n      setCategories((state) => [inputValue, ...state]);\n      setInputValue('');\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type='text' value={inputValue} onChange={handleInputChange} />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n","import React from 'react';\n\nexport const GifGridItem = ({ title, url, id }) => {\n  //   console.log(props);\n  return (\n    <div className='card animate__animated animate__fadeIn'>\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  );\n};\n","export const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category\n  )}&limit=10&api_key=KCLd3zG1q2Wan1JZJRA7B21tqUW29Wg2`;\n  const response = await fetch(url);\n  const { data } = await response.json();\n\n  const gifs = data.map((img) => ({\n    id: img.id,\n    title: img.title,\n    url: img.images?.preview_webp.url,\n  }));\n  return gifs;\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { GifGridItem } from './GifGridItem.jsx';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\nexport const GifGrid = ({ category }) => {\n  const { data: images, loading } = useFetchGifs(category);\n\n  return (\n    <>\n      <h2 className=' animate__animated animate__fadeIn'>{category}</h2>\n      {loading && (\n        <p className='animate__animated animate__flash'>Loading...</p>\n      )}\n      <div className='card-grid'>\n        {images.map((img) => (\n          <GifGridItem key={img.id} {...img} />\n        ))}\n      </div>\n    </>\n  );\n};\n\nGifGrid.propTypes = {\n  category: PropTypes.string.isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n  useEffect(() => {\n    getGifs(category).then((imgs) =>\n      setState({\n        data: imgs,\n        loading: false,\n      })\n    );\n  }, [category]);\n\n  return state;\n};\n","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid.jsx';\n\nexport const GifExpertApp = () => {\n  const [categories, setCategories] = useState(['One Punch']);\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n      <ol>\n        {categories.map((category) => (\n          <GifGrid key={category} category={category} />\n        ))}\n      </ol>\n    </>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp.jsx';\nimport './index.css';\n\nReactDOM.render(<GifExpertApp />, document.getElementById('root'));\n"],"sourceRoot":""}